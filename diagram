#! /usr/bin/perl

use warnings;
use strict;

use My::Schema;

use DateTime::Format::ISO8601;
use YAML;

my $sch = My::Schema->connect("dbi:SQLite:dbname=mca.sqlite");

my $conf = YAML::LoadFile($ARGV[0]);

my $date = 
    DateTime::Format::ISO8601->parse_datetime($conf->{date}, 'YYMMDD');

my @tiploc = @{$conf->{tiplocs}};

my @train = @{$conf->{trains}};

my %tiplocmap;
for (my $i = 0; $i < @tiploc; $i++) {
    $tiplocmap{$tiploc[$i]} = $i;
}

sub maptime {
    my ($time) = @_;
    my ($hh, $mm, $h) = $time =~ /^(\d\d)(\d\d)(H?)/;
    return $hh*120 + $mm*2 + !!$h;
}

my $line = 0;
my $lasttime;

sub tweaktime {
    $_[0] += 2880 if defined($lasttime) && $_[0] < $lasttime - 1440;
    $lasttime = $_[0];
}
sub pass {
    tweaktime($_[0]);
    printf "%d %d %s\n", @_, $line ? 'cont' : 'start';
    $line = 1
}

sub arr {
    tweaktime($_[0]);
    printf "%d %d arr\n", @_;
}

sub dep {
    tweaktime($_[0]);
    printf "%d %d dep\n", @_;
}

sub done {
    if ($line) {
	printf "finish\n";
    }
    $line = 0;
    undef $lasttime;
}

print <<EOH;
%!PS-Adobe-3.1
/conv {
    72 mul exch
    72 mul 10 mul 2880 div exch
} def

/start { conv moveto } def
/cont { conv lineto } def
/arr { gsave newpath conv 3 sub moveto 0 6 rlineto
       0.1 setlinewidth stroke grestore } def
/dep { arr } def
/finish { stroke } def

/axes {
    gsave 0.5 setlinewidth 0.5 setgray
    dup length 1 sub
    0 1 24 { dup 120 mul 0 conv moveto dup 120 mul 2 index conv lineto
	2 string cvs show } for
    stroke
    0.1 setlinewidth
    0 1 240 { dup 10 mul 0 conv moveto dup 10 mul 2 index conv lineto pop } for
    stroke
    pop
    0.5 setlinewidth
    0 1 2 index length 1 sub
    { dup 0 exch conv moveto dup 2880 exch conv lineto
	  1 index exch get show } for
    stroke grestore
    0 0 conv 2880 3 index length 1 sub conv rectclip
    pop
} def
%%EndProlog
%%BeginSetup
<< /PageSize [ 841 595 ] >> setpagedevice
%%EndSetup
%%Page 1 1
%%BeginPageSetup
1 setlinewidth
/Helvetica findfont 10 scalefont setfont
36 36 translate
%EndPageSetup
EOH

print "[ ";
for (@tiploc) {
    printf "(%s) ", $_;
}
print "] axes\n";

for my $train ($sch->resultset('bs')->search({unique_id => \@train})) {
    for (0, 1) {
	if ($train->runs_on($date->clone->subtract(days=>$_))) {
	    my $offset = -2880 * $_;
	    printf("%% %s (day %d):\n", $train->unique_id, -$_);
	    for my $li (map $_->lis, $train->crs) {
		if (exists $tiplocmap{$li->tiploc}) {
		    no warnings qw/uninitialized/;
		    printf("%% %-5s %-4s %-5s %-4s %-5s\n",
			   $li->sched_arr_time, $li->public_arr_time,
			   $li->sched_pass,
			   $li->public_dep_time, $li->sched_dep_time);
		    arr(maptime($li->public_arr_time) + $offset,
			$tiplocmap{$li->tiploc}) if $li->public_arr_time;
		    for ($li->sched_arr_time, $li->sched_pass,
			 $li->sched_dep_time) {
			if ($_) {
			    pass(maptime($_) + $offset,
				 $tiplocmap{$li->tiploc});
			}
		    }
		    dep(maptime($li->public_dep_time) + $offset, 
			$tiplocmap{$li->tiploc}) if $li->public_dep_time;
		}
	    }
	    done;
	}
    }
} 

print "showpage\n%%EOF\n";

# We're aiming for something like:
# SELECT bs.* FROM bs, cr, li, wanted WHERE li.tiploc=wanted.tiploc AND li.crlineno=cr.lineno AND cr.bslineno = bs.lineno GROUP BY bs.lineno HAVING COUNT(*) > 1;
